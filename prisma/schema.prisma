generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String
  lastName  String
  email     String       @unique
  password  String
  bills     Bill[]
  purchases Purchase[]
  credit    CreditLine[]
  debt      Debt[]
  budgets   Budget[]
}

model Bill {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  image         String
  name          String
  dayOfMonth    Int
  description   String?
  category      Int
  price         Decimal
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId String      @db.Uuid
}

model Credentials {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      Int
  email     String?
  username  String?
  password  String?
  bills     Bill[]
  purchases Purchase[]
  credit    CreditLine[]
  debt      Debt[]
}

model Purchase {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  vendor        String
  product       String
  description   String?
  category      Int
  price         Decimal
  date          DateTime    @default(now())
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId String      @db.Uuid
}

model CreditLine {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  company       String
  balance       Decimal
  limit         Decimal
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId String      @db.Uuid
}

model Debt {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  company       String
  description   String?
  principal     Decimal
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  credentialsId String      @db.Uuid
}

model Budget {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @db.Uuid
  month          Int
  rentLimit      Decimal
  utilitiesLimit Decimal
  insuranceLimit Decimal
  foodLimit      Decimal
  streamingLimit Decimal
  miscLimit      Decimal
  petLimit       Decimal
  debtLimit      Decimal
}
